/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * tripeasy
 * Tripeasy„ÅÆAPI‰ªïÊßòÊõ∏
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  PostVerifyEmail200,
  PostVerifyEmail400,
  PostVerifyEmail404,
  PostVerifyEmailBody
} from '../../model'



/**
 * @summary „É°„Éº„É´Ê§úË®ºAPI
 */
export const postVerifyEmail = (
    postVerifyEmailBody: PostVerifyEmailBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostVerifyEmail200>> => {
    
    return axios.post(
      `/api/verify-email`,
      postVerifyEmailBody,options
    );
  }



export const getPostVerifyEmailMutationOptions = <TError = AxiosError<PostVerifyEmail400 | PostVerifyEmail404>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVerifyEmail>>, TError,{data: PostVerifyEmailBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postVerifyEmail>>, TError,{data: PostVerifyEmailBody}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVerifyEmail>>, {data: PostVerifyEmailBody}> = (props) => {
          const {data} = props ?? {};

          return  postVerifyEmail(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVerifyEmailMutationResult = NonNullable<Awaited<ReturnType<typeof postVerifyEmail>>>
    export type PostVerifyEmailMutationBody = PostVerifyEmailBody
    export type PostVerifyEmailMutationError = AxiosError<PostVerifyEmail400 | PostVerifyEmail404>

    /**
 * @summary „É°„Éº„É´Ê§úË®ºAPI
 */
export const usePostVerifyEmail = <TError = AxiosError<PostVerifyEmail400 | PostVerifyEmail404>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVerifyEmail>>, TError,{data: PostVerifyEmailBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postVerifyEmail>>,
        TError,
        {data: PostVerifyEmailBody},
        TContext
      > => {

      const mutationOptions = getPostVerifyEmailMutationOptions(options);

      return useMutation(mutationOptions);
    }
    