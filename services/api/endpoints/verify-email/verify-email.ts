/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * tripeasy
 * Tripeasy„ÅÆAPI‰ªïÊßòÊõ∏
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'
import type {
  PostVerifyEmail200,
  PostVerifyEmail400,
  PostVerifyEmail404,
  PostVerifyEmailBody
} from '../../model'
import { customInstance } from '../../mutator/custom-instance';
import type { ErrorType, BodyType } from '../../mutator/custom-instance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary „É°„Éº„É´Ê§úË®ºAPI
 */
export const postVerifyEmail = (
    postVerifyEmailBody: BodyType<PostVerifyEmailBody>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PostVerifyEmail200>(
      {url: `/api/verify-email`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postVerifyEmailBody, signal
    },
      options);
    }
  


export const getPostVerifyEmailMutationOptions = <TError = ErrorType<PostVerifyEmail400 | PostVerifyEmail404>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVerifyEmail>>, TError,{data: BodyType<PostVerifyEmailBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postVerifyEmail>>, TError,{data: BodyType<PostVerifyEmailBody>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVerifyEmail>>, {data: BodyType<PostVerifyEmailBody>}> = (props) => {
          const {data} = props ?? {};

          return  postVerifyEmail(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVerifyEmailMutationResult = NonNullable<Awaited<ReturnType<typeof postVerifyEmail>>>
    export type PostVerifyEmailMutationBody = BodyType<PostVerifyEmailBody>
    export type PostVerifyEmailMutationError = ErrorType<PostVerifyEmail400 | PostVerifyEmail404>

    /**
 * @summary „É°„Éº„É´Ê§úË®ºAPI
 */
export const usePostVerifyEmail = <TError = ErrorType<PostVerifyEmail400 | PostVerifyEmail404>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVerifyEmail>>, TError,{data: BodyType<PostVerifyEmailBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof postVerifyEmail>>,
        TError,
        {data: BodyType<PostVerifyEmailBody>},
        TContext
      > => {

      const mutationOptions = getPostVerifyEmailMutationOptions(options);

      return useMutation(mutationOptions);
    }
    