/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * tripeasy
 * Tripeasy„ÅÆAPI‰ªïÊßòÊõ∏
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  PostRegister200,
  PostRegister409,
  PostRegisterBody
} from '../../model'



/**
 * @summary Êñ∞Ë¶è„É¶„Éº„Ç∂„ÉºÁôªÈå≤API
 */
export const postRegister = (
    postRegisterBody: PostRegisterBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostRegister200>> => {
    
    return axios.post(
      `/api/register`,
      postRegisterBody,options
    );
  }



export const getPostRegisterMutationOptions = <TError = AxiosError<PostRegister409>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRegister>>, TError,{data: PostRegisterBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postRegister>>, TError,{data: PostRegisterBody}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postRegister>>, {data: PostRegisterBody}> = (props) => {
          const {data} = props ?? {};

          return  postRegister(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof postRegister>>>
    export type PostRegisterMutationBody = PostRegisterBody
    export type PostRegisterMutationError = AxiosError<PostRegister409>

    /**
 * @summary Êñ∞Ë¶è„É¶„Éº„Ç∂„ÉºÁôªÈå≤API
 */
export const usePostRegister = <TError = AxiosError<PostRegister409>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRegister>>, TError,{data: PostRegisterBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postRegister>>,
        TError,
        {data: PostRegisterBody},
        TContext
      > => {

      const mutationOptions = getPostRegisterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    