/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * tripeasy
 * Tripeasy„ÅÆAPI‰ªïÊßòÊõ∏
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'
import type {
  DeleteTodoItemsId200,
  DeleteTodoItemsId500,
  PatchTodoItemsId200,
  PatchTodoItemsId500,
  PatchTodoItemsIdBody,
  PostTodoItems200,
  PostTodoItems500,
  PostTodoItemsBody
} from '../../model'
import { customInstance } from '../../mutator/custom-instance';
import type { ErrorType, BodyType } from '../../mutator/custom-instance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary TODO„Ç¢„Ç§„ÉÜ„É†Êñ∞Ë¶è‰ΩúÊàêAPI
 */
export const postTodoItems = (
    postTodoItemsBody: BodyType<PostTodoItemsBody>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PostTodoItems200>(
      {url: `/api/todo-items`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTodoItemsBody, signal
    },
      options);
    }
  


export const getPostTodoItemsMutationOptions = <TError = ErrorType<PostTodoItems500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTodoItems>>, TError,{data: BodyType<PostTodoItemsBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postTodoItems>>, TError,{data: BodyType<PostTodoItemsBody>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTodoItems>>, {data: BodyType<PostTodoItemsBody>}> = (props) => {
          const {data} = props ?? {};

          return  postTodoItems(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTodoItemsMutationResult = NonNullable<Awaited<ReturnType<typeof postTodoItems>>>
    export type PostTodoItemsMutationBody = BodyType<PostTodoItemsBody>
    export type PostTodoItemsMutationError = ErrorType<PostTodoItems500>

    /**
 * @summary TODO„Ç¢„Ç§„ÉÜ„É†Êñ∞Ë¶è‰ΩúÊàêAPI
 */
export const usePostTodoItems = <TError = ErrorType<PostTodoItems500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTodoItems>>, TError,{data: BodyType<PostTodoItemsBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTodoItems>>,
        TError,
        {data: BodyType<PostTodoItemsBody>},
        TContext
      > => {

      const mutationOptions = getPostTodoItemsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary TODO„Ç¢„Ç§„ÉÜ„É†Êõ¥Êñ∞API
 */
export const patchTodoItemsId = (
    id: number,
    patchTodoItemsIdBody: BodyType<PatchTodoItemsIdBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<PatchTodoItemsId200>(
      {url: `/api/todo-items/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchTodoItemsIdBody
    },
      options);
    }
  


export const getPatchTodoItemsIdMutationOptions = <TError = ErrorType<PatchTodoItemsId500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchTodoItemsId>>, TError,{id: number;data: BodyType<PatchTodoItemsIdBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof patchTodoItemsId>>, TError,{id: number;data: BodyType<PatchTodoItemsIdBody>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchTodoItemsId>>, {id: number;data: BodyType<PatchTodoItemsIdBody>}> = (props) => {
          const {id,data} = props ?? {};

          return  patchTodoItemsId(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchTodoItemsIdMutationResult = NonNullable<Awaited<ReturnType<typeof patchTodoItemsId>>>
    export type PatchTodoItemsIdMutationBody = BodyType<PatchTodoItemsIdBody>
    export type PatchTodoItemsIdMutationError = ErrorType<PatchTodoItemsId500>

    /**
 * @summary TODO„Ç¢„Ç§„ÉÜ„É†Êõ¥Êñ∞API
 */
export const usePatchTodoItemsId = <TError = ErrorType<PatchTodoItemsId500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchTodoItemsId>>, TError,{id: number;data: BodyType<PatchTodoItemsIdBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof patchTodoItemsId>>,
        TError,
        {id: number;data: BodyType<PatchTodoItemsIdBody>},
        TContext
      > => {

      const mutationOptions = getPatchTodoItemsIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary TODO„Ç¢„Ç§„ÉÜ„É†ÂâäÈô§API
 */
export const deleteTodoItemsId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<DeleteTodoItemsId200>(
      {url: `/api/todo-items/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTodoItemsIdMutationOptions = <TError = ErrorType<DeleteTodoItemsId500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTodoItemsId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTodoItemsId>>, TError,{id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTodoItemsId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteTodoItemsId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTodoItemsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTodoItemsId>>>
    
    export type DeleteTodoItemsIdMutationError = ErrorType<DeleteTodoItemsId500>

    /**
 * @summary TODO„Ç¢„Ç§„ÉÜ„É†ÂâäÈô§API
 */
export const useDeleteTodoItemsId = <TError = ErrorType<DeleteTodoItemsId500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTodoItemsId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTodoItemsId>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteTodoItemsIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    