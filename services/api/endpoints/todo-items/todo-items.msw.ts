/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * tripeasy
 * Tripeasy„ÅÆAPI‰ªïÊßòÊõ∏
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  DeleteTodoItemsId200,
  PatchTodoItemsId200,
  PatchTodoItemsIsCompletedId200,
  PostTodoItems200
} from '../../model'

export const getPostTodoItemsResponseMock = (overrideResponse: Partial< PostTodoItems200 > = {}): PostTodoItems200 => ({id: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})

export const getPatchTodoItemsIdResponseMock = (overrideResponse: Partial< PatchTodoItemsId200 > = {}): PatchTodoItemsId200 => ({id: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})

export const getDeleteTodoItemsIdResponseMock = (overrideResponse: Partial< DeleteTodoItemsId200 > = {}): DeleteTodoItemsId200 => ({id: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})

export const getPatchTodoItemsIsCompletedIdResponseMock = (overrideResponse: Partial< PatchTodoItemsIsCompletedId200 > = {}): PatchTodoItemsIsCompletedId200 => ({id: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})


export const getPostTodoItemsMockHandler = (overrideResponse?: PostTodoItems200 | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<PostTodoItems200> | PostTodoItems200)) => {
  return http.post('*/todo-items', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPostTodoItemsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPatchTodoItemsIdMockHandler = (overrideResponse?: PatchTodoItemsId200 | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<PatchTodoItemsId200> | PatchTodoItemsId200)) => {
  return http.patch('*/todo-items/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPatchTodoItemsIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteTodoItemsIdMockHandler = (overrideResponse?: DeleteTodoItemsId200 | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<DeleteTodoItemsId200> | DeleteTodoItemsId200)) => {
  return http.delete('*/todo-items/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeleteTodoItemsIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPatchTodoItemsIsCompletedIdMockHandler = (overrideResponse?: PatchTodoItemsIsCompletedId200 | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<PatchTodoItemsIsCompletedId200> | PatchTodoItemsIsCompletedId200)) => {
  return http.patch('*/todo-items/is-completed/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPatchTodoItemsIsCompletedIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getTodoItemsMock = () => [
  getPostTodoItemsMockHandler(),
  getPatchTodoItemsIdMockHandler(),
  getDeleteTodoItemsIdMockHandler(),
  getPatchTodoItemsIsCompletedIdMockHandler()
]
