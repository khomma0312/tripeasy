/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * tripeasy
 * Tripeasy„ÅÆAPI‰ªïÊßòÊõ∏
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'
import type {
  PostTripRoutePoints200,
  PostTripRoutePoints403,
  PostTripRoutePoints500,
  PostTripRoutePointsBody
} from '../../model'
import { customInstance } from '../../mutator/custom-instance';
import type { ErrorType, BodyType } from '../../mutator/custom-instance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary ÁõÆÁöÑÂú∞Êñ∞Ë¶è‰ΩúÊàêAPI
 */
export const postTripRoutePoints = (
    postTripRoutePointsBody: BodyType<PostTripRoutePointsBody>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PostTripRoutePoints200>(
      {url: `/api/trip-route-points`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postTripRoutePointsBody, signal
    },
      options);
    }
  


export const getPostTripRoutePointsMutationOptions = <TError = ErrorType<PostTripRoutePoints403 | PostTripRoutePoints500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTripRoutePoints>>, TError,{data: BodyType<PostTripRoutePointsBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postTripRoutePoints>>, TError,{data: BodyType<PostTripRoutePointsBody>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTripRoutePoints>>, {data: BodyType<PostTripRoutePointsBody>}> = (props) => {
          const {data} = props ?? {};

          return  postTripRoutePoints(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTripRoutePointsMutationResult = NonNullable<Awaited<ReturnType<typeof postTripRoutePoints>>>
    export type PostTripRoutePointsMutationBody = BodyType<PostTripRoutePointsBody>
    export type PostTripRoutePointsMutationError = ErrorType<PostTripRoutePoints403 | PostTripRoutePoints500>

    /**
 * @summary ÁõÆÁöÑÂú∞Êñ∞Ë¶è‰ΩúÊàêAPI
 */
export const usePostTripRoutePoints = <TError = ErrorType<PostTripRoutePoints403 | PostTripRoutePoints500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTripRoutePoints>>, TError,{data: BodyType<PostTripRoutePointsBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTripRoutePoints>>,
        TError,
        {data: BodyType<PostTripRoutePointsBody>},
        TContext
      > => {

      const mutationOptions = getPostTripRoutePointsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    