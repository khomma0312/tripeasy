/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * tripeasy
 * Tripeasy„ÅÆAPI‰ªïÊßòÊõ∏
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'
import type {
  PostRequestToken200,
  PostRequestToken400,
  PostRequestToken404,
  PostRequestToken500,
  PostRequestTokenBody
} from '../../model'
import { customInstance } from '../../mutator/custom-instance';
import type { ErrorType, BodyType } from '../../mutator/custom-instance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary „Éà„Éº„ÇØ„É≥„ÅÆÂÜçÁô∫Ë°åAPI
 */
export const postRequestToken = (
    postRequestTokenBody: BodyType<PostRequestTokenBody>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PostRequestToken200>(
      {url: `/api/request-token`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postRequestTokenBody, signal
    },
      options);
    }
  


export const getPostRequestTokenMutationOptions = <TError = ErrorType<PostRequestToken400 | PostRequestToken404 | PostRequestToken500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRequestToken>>, TError,{data: BodyType<PostRequestTokenBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postRequestToken>>, TError,{data: BodyType<PostRequestTokenBody>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postRequestToken>>, {data: BodyType<PostRequestTokenBody>}> = (props) => {
          const {data} = props ?? {};

          return  postRequestToken(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostRequestTokenMutationResult = NonNullable<Awaited<ReturnType<typeof postRequestToken>>>
    export type PostRequestTokenMutationBody = BodyType<PostRequestTokenBody>
    export type PostRequestTokenMutationError = ErrorType<PostRequestToken400 | PostRequestToken404 | PostRequestToken500>

    /**
 * @summary „Éà„Éº„ÇØ„É≥„ÅÆÂÜçÁô∫Ë°åAPI
 */
export const usePostRequestToken = <TError = ErrorType<PostRequestToken400 | PostRequestToken404 | PostRequestToken500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRequestToken>>, TError,{data: BodyType<PostRequestTokenBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof postRequestToken>>,
        TError,
        {data: BodyType<PostRequestTokenBody>},
        TContext
      > => {

      const mutationOptions = getPostRequestTokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    