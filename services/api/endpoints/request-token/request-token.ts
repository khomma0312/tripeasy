/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * tripeasy
 * Tripeasy„ÅÆAPI‰ªïÊßòÊõ∏
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  PostRequestToken200,
  PostRequestToken400,
  PostRequestToken404,
  PostRequestToken500,
  PostRequestTokenBody
} from '../../model'



/**
 * @summary „Éà„Éº„ÇØ„É≥„ÅÆÂÜçÁô∫Ë°åAPI
 */
export const postRequestToken = (
    postRequestTokenBody: PostRequestTokenBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostRequestToken200>> => {
    
    return axios.post(
      `/api/request-token`,
      postRequestTokenBody,options
    );
  }



export const getPostRequestTokenMutationOptions = <TError = AxiosError<PostRequestToken400 | PostRequestToken404 | PostRequestToken500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRequestToken>>, TError,{data: PostRequestTokenBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postRequestToken>>, TError,{data: PostRequestTokenBody}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postRequestToken>>, {data: PostRequestTokenBody}> = (props) => {
          const {data} = props ?? {};

          return  postRequestToken(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostRequestTokenMutationResult = NonNullable<Awaited<ReturnType<typeof postRequestToken>>>
    export type PostRequestTokenMutationBody = PostRequestTokenBody
    export type PostRequestTokenMutationError = AxiosError<PostRequestToken400 | PostRequestToken404 | PostRequestToken500>

    /**
 * @summary „Éà„Éº„ÇØ„É≥„ÅÆÂÜçÁô∫Ë°åAPI
 */
export const usePostRequestToken = <TError = AxiosError<PostRequestToken400 | PostRequestToken404 | PostRequestToken500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRequestToken>>, TError,{data: PostRequestTokenBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postRequestToken>>,
        TError,
        {data: PostRequestTokenBody},
        TContext
      > => {

      const mutationOptions = getPostRequestTokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    