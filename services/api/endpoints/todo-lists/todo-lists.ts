/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * tripeasy
 * Tripeasy„ÅÆAPI‰ªïÊßòÊõ∏
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'
import type {
  GetTodoLists200,
  GetTodoLists403,
  GetTodoListsId200,
  GetTodoListsId403,
  GetTodoListsId404,
  GetTodoListsParams
} from '../../model'
import { customInstance } from '../../mutator/custom-instance';
import type { ErrorType } from '../../mutator/custom-instance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary „É≠„Ç∞„Ç§„É≥‰∏≠„ÅÆ„É¶„Éº„Ç∂„Éº„Å´Á¥ê„Å•„ÅèÂÖ®„Å¶„ÅÆTODO„É™„Çπ„Éà„ÅÆÂèñÂæó(„Éö„Éº„Ç∏„Éç„Éº„Ç∑„Éß„É≥„ÇÇ„ÅÇ„Çä)
 */
export const getTodoLists = (
    params: GetTodoListsParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<GetTodoLists200>(
      {url: `/api/todo-lists`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetTodoListsQueryKey = (params: GetTodoListsParams,) => {
    return [`/api/todo-lists`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTodoListsQueryOptions = <TData = Awaited<ReturnType<typeof getTodoLists>>, TError = ErrorType<GetTodoLists403>>(params: GetTodoListsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTodoLists>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTodoListsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTodoLists>>> = ({ signal }) => getTodoLists(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTodoLists>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTodoListsQueryResult = NonNullable<Awaited<ReturnType<typeof getTodoLists>>>
export type GetTodoListsQueryError = ErrorType<GetTodoLists403>


export function useGetTodoLists<TData = Awaited<ReturnType<typeof getTodoLists>>, TError = ErrorType<GetTodoLists403>>(
 params: GetTodoListsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTodoLists>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTodoLists>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTodoLists<TData = Awaited<ReturnType<typeof getTodoLists>>, TError = ErrorType<GetTodoLists403>>(
 params: GetTodoListsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTodoLists>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTodoLists>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTodoLists<TData = Awaited<ReturnType<typeof getTodoLists>>, TError = ErrorType<GetTodoLists403>>(
 params: GetTodoListsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTodoLists>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary „É≠„Ç∞„Ç§„É≥‰∏≠„ÅÆ„É¶„Éº„Ç∂„Éº„Å´Á¥ê„Å•„ÅèÂÖ®„Å¶„ÅÆTODO„É™„Çπ„Éà„ÅÆÂèñÂæó(„Éö„Éº„Ç∏„Éç„Éº„Ç∑„Éß„É≥„ÇÇ„ÅÇ„Çä)
 */

export function useGetTodoLists<TData = Awaited<ReturnType<typeof getTodoLists>>, TError = ErrorType<GetTodoLists403>>(
 params: GetTodoListsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTodoLists>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTodoListsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetTodoListsSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getTodoLists>>, TError = ErrorType<GetTodoLists403>>(params: GetTodoListsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTodoLists>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTodoListsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTodoLists>>> = ({ signal }) => getTodoLists(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTodoLists>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTodoListsSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getTodoLists>>>
export type GetTodoListsSuspenseQueryError = ErrorType<GetTodoLists403>


export function useGetTodoListsSuspense<TData = Awaited<ReturnType<typeof getTodoLists>>, TError = ErrorType<GetTodoLists403>>(
 params: GetTodoListsParams, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTodoLists>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTodoListsSuspense<TData = Awaited<ReturnType<typeof getTodoLists>>, TError = ErrorType<GetTodoLists403>>(
 params: GetTodoListsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTodoLists>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTodoListsSuspense<TData = Awaited<ReturnType<typeof getTodoLists>>, TError = ErrorType<GetTodoLists403>>(
 params: GetTodoListsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTodoLists>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary „É≠„Ç∞„Ç§„É≥‰∏≠„ÅÆ„É¶„Éº„Ç∂„Éº„Å´Á¥ê„Å•„ÅèÂÖ®„Å¶„ÅÆTODO„É™„Çπ„Éà„ÅÆÂèñÂæó(„Éö„Éº„Ç∏„Éç„Éº„Ç∑„Éß„É≥„ÇÇ„ÅÇ„Çä)
 */

export function useGetTodoListsSuspense<TData = Awaited<ReturnType<typeof getTodoLists>>, TError = ErrorType<GetTodoLists403>>(
 params: GetTodoListsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTodoLists>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTodoListsSuspenseQueryOptions(params,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Âçò‰∏Ä„ÅÆTODO„É™„Çπ„Éà„ÅÆÂèñÂæó
 */
export const getTodoListsId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<GetTodoListsId200>(
      {url: `/api/todo-lists/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTodoListsIdQueryKey = (id: number,) => {
    return [`/api/todo-lists/${id}`] as const;
    }

    
export const getGetTodoListsIdQueryOptions = <TData = Awaited<ReturnType<typeof getTodoListsId>>, TError = ErrorType<GetTodoListsId403 | GetTodoListsId404>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTodoListsId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTodoListsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTodoListsId>>> = ({ signal }) => getTodoListsId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTodoListsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTodoListsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTodoListsId>>>
export type GetTodoListsIdQueryError = ErrorType<GetTodoListsId403 | GetTodoListsId404>


export function useGetTodoListsId<TData = Awaited<ReturnType<typeof getTodoListsId>>, TError = ErrorType<GetTodoListsId403 | GetTodoListsId404>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTodoListsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTodoListsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTodoListsId<TData = Awaited<ReturnType<typeof getTodoListsId>>, TError = ErrorType<GetTodoListsId403 | GetTodoListsId404>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTodoListsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTodoListsId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTodoListsId<TData = Awaited<ReturnType<typeof getTodoListsId>>, TError = ErrorType<GetTodoListsId403 | GetTodoListsId404>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTodoListsId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Âçò‰∏Ä„ÅÆTODO„É™„Çπ„Éà„ÅÆÂèñÂæó
 */

export function useGetTodoListsId<TData = Awaited<ReturnType<typeof getTodoListsId>>, TError = ErrorType<GetTodoListsId403 | GetTodoListsId404>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTodoListsId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTodoListsIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetTodoListsIdSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getTodoListsId>>, TError = ErrorType<GetTodoListsId403 | GetTodoListsId404>>(id: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTodoListsId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTodoListsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTodoListsId>>> = ({ signal }) => getTodoListsId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTodoListsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTodoListsIdSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getTodoListsId>>>
export type GetTodoListsIdSuspenseQueryError = ErrorType<GetTodoListsId403 | GetTodoListsId404>


export function useGetTodoListsIdSuspense<TData = Awaited<ReturnType<typeof getTodoListsId>>, TError = ErrorType<GetTodoListsId403 | GetTodoListsId404>>(
 id: number, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTodoListsId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTodoListsIdSuspense<TData = Awaited<ReturnType<typeof getTodoListsId>>, TError = ErrorType<GetTodoListsId403 | GetTodoListsId404>>(
 id: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTodoListsId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTodoListsIdSuspense<TData = Awaited<ReturnType<typeof getTodoListsId>>, TError = ErrorType<GetTodoListsId403 | GetTodoListsId404>>(
 id: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTodoListsId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Âçò‰∏Ä„ÅÆTODO„É™„Çπ„Éà„ÅÆÂèñÂæó
 */

export function useGetTodoListsIdSuspense<TData = Awaited<ReturnType<typeof getTodoListsId>>, TError = ErrorType<GetTodoListsId403 | GetTodoListsId404>>(
 id: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTodoListsId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTodoListsIdSuspenseQueryOptions(id,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



