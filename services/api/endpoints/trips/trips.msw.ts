/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * tripeasy
 * Tripeasy„ÅÆAPI‰ªïÊßòÊõ∏
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  DeleteTripsId200,
  GetTrips200
} from '../../model'

export const getGetTripsResponseMock = (overrideResponse: Partial< GetTrips200 > = {}): GetTrips200 => ({totalPages: faker.number.int({min: undefined, max: undefined}), trips: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({destination: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), endDate: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), image: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), startDate: faker.string.alpha(20), title: faker.string.alpha(20)})), ...overrideResponse})

export const getDeleteTripsIdResponseMock = (overrideResponse: Partial< DeleteTripsId200 > = {}): DeleteTripsId200 => ({id: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})


export const getGetTripsMockHandler = (overrideResponse?: GetTrips200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetTrips200> | GetTrips200)) => {
  return http.get('*/trips', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetTripsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteTripsIdMockHandler = (overrideResponse?: DeleteTripsId200 | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<DeleteTripsId200> | DeleteTripsId200)) => {
  return http.delete('*/trips/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeleteTripsIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getTripsMock = () => [
  getGetTripsMockHandler(),
  getDeleteTripsIdMockHandler()
]
