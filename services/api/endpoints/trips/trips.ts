/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * tripeasy
 * TripeasyのAPI仕様書
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'
import type {
  GetTrips200,
  GetTrips403,
  GetTripsParams
} from '../../model'
import { customInstance } from '../../mutator/custom-instance';
import type { ErrorType } from '../../mutator/custom-instance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary ログイン中のユーザーに紐づく全ての旅行情報の取得
 */
export const getTrips = (
    params: GetTripsParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<GetTrips200>(
      {url: `/api/trips`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetTripsQueryKey = (params: GetTripsParams,) => {
    return [`/api/trips`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTripsQueryOptions = <TData = Awaited<ReturnType<typeof getTrips>>, TError = ErrorType<GetTrips403>>(params: GetTripsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTrips>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTripsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTrips>>> = ({ signal }) => getTrips(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTrips>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTripsQueryResult = NonNullable<Awaited<ReturnType<typeof getTrips>>>
export type GetTripsQueryError = ErrorType<GetTrips403>


export function useGetTrips<TData = Awaited<ReturnType<typeof getTrips>>, TError = ErrorType<GetTrips403>>(
 params: GetTripsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTrips>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTrips>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTrips<TData = Awaited<ReturnType<typeof getTrips>>, TError = ErrorType<GetTrips403>>(
 params: GetTripsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTrips>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTrips>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTrips<TData = Awaited<ReturnType<typeof getTrips>>, TError = ErrorType<GetTrips403>>(
 params: GetTripsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTrips>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary ログイン中のユーザーに紐づく全ての旅行情報の取得
 */

export function useGetTrips<TData = Awaited<ReturnType<typeof getTrips>>, TError = ErrorType<GetTrips403>>(
 params: GetTripsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTrips>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTripsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetTripsSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getTrips>>, TError = ErrorType<GetTrips403>>(params: GetTripsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTrips>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTripsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTrips>>> = ({ signal }) => getTrips(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTrips>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTripsSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getTrips>>>
export type GetTripsSuspenseQueryError = ErrorType<GetTrips403>


export function useGetTripsSuspense<TData = Awaited<ReturnType<typeof getTrips>>, TError = ErrorType<GetTrips403>>(
 params: GetTripsParams, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTrips>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTripsSuspense<TData = Awaited<ReturnType<typeof getTrips>>, TError = ErrorType<GetTrips403>>(
 params: GetTripsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTrips>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTripsSuspense<TData = Awaited<ReturnType<typeof getTrips>>, TError = ErrorType<GetTrips403>>(
 params: GetTripsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTrips>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary ログイン中のユーザーに紐づく全ての旅行情報の取得
 */

export function useGetTripsSuspense<TData = Awaited<ReturnType<typeof getTrips>>, TError = ErrorType<GetTrips403>>(
 params: GetTripsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTrips>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTripsSuspenseQueryOptions(params,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



