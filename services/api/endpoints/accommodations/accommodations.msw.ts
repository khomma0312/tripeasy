/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * tripeasy
 * TripeasyのAPI仕様書
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  GetAccommodations200
} from '../../model'

export const getGetAccommodationsResponseMock = (overrideResponse: Partial< GetAccommodations200 > = {}): GetAccommodations200 => ({accommodations: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({address: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), bookingId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), bookingUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), checkIn: faker.string.alpha(20), checkOut: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), image: faker.string.alpha(20), name: faker.string.alpha(20)})), totalPages: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})


export const getGetAccommodationsMockHandler = (overrideResponse?: GetAccommodations200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetAccommodations200> | GetAccommodations200)) => {
  return http.get('*/accommodations', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetAccommodationsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getAccommodationsMock = () => [
  getGetAccommodationsMockHandler()
]
